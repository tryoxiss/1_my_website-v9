---
import BaseHead from '../components/BaseHead.astro';
import Aside from '../components/Aside.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<style>
.color-slider {
    --slider-saturation: 80%;
    --slider-lightness: 50%;

    -webkit-appearance: none;
    width: 100%;
    height: 15px;
    border-radius: 10vw;  
    background: linear-gradient(to right, 
        hsl(0, var(--slider-saturation), var(--slider-lightness)), 
        hsl(10, var(--slider-saturation), var(--slider-lightness)),
        hsl(20, var(--slider-saturation), var(--slider-lightness)),
        hsl(30, var(--slider-saturation), var(--slider-lightness)),
        hsl(40, var(--slider-saturation), var(--slider-lightness)),
        hsl(50, var(--slider-saturation), var(--slider-lightness)),
        hsl(60, var(--slider-saturation), var(--slider-lightness)),
        hsl(70, var(--slider-saturation), var(--slider-lightness)),
        hsl(80, var(--slider-saturation), var(--slider-lightness)),
        hsl(90, var(--slider-saturation), var(--slider-lightness)),

        hsl(100, var(--slider-saturation), var(--slider-lightness)), 
        hsl(110, var(--slider-saturation), var(--slider-lightness)),
        hsl(120, var(--slider-saturation), var(--slider-lightness)),
        hsl(130, var(--slider-saturation), var(--slider-lightness)),
        hsl(140, var(--slider-saturation), var(--slider-lightness)),
        hsl(150, var(--slider-saturation), var(--slider-lightness)),
        hsl(160, var(--slider-saturation), var(--slider-lightness)),
        hsl(170, var(--slider-saturation), var(--slider-lightness)),
        hsl(180, var(--slider-saturation), var(--slider-lightness)),
        hsl(190, var(--slider-saturation), var(--slider-lightness)),

        hsl(200, var(--slider-saturation), var(--slider-lightness)), 
        hsl(210, var(--slider-saturation), var(--slider-lightness)),
        hsl(220, var(--slider-saturation), var(--slider-lightness)),
        hsl(230, var(--slider-saturation), var(--slider-lightness)),
        hsl(240, var(--slider-saturation), var(--slider-lightness)),
        hsl(250, var(--slider-saturation), var(--slider-lightness)),
        hsl(260, var(--slider-saturation), var(--slider-lightness)),
        hsl(270, var(--slider-saturation), var(--slider-lightness)),
        hsl(280, var(--slider-saturation), var(--slider-lightness)),
        hsl(290, var(--slider-saturation), var(--slider-lightness)),

        hsl(300, var(--slider-saturation), var(--slider-lightness)), 
        hsl(310, var(--slider-saturation), var(--slider-lightness)),
        hsl(320, var(--slider-saturation), var(--slider-lightness)),
        hsl(330, var(--slider-saturation), var(--slider-lightness)),
        hsl(340, var(--slider-saturation), var(--slider-lightness)),
        hsl(350, var(--slider-saturation), var(--slider-lightness)),
        hsl(360, var(--slider-saturation), var(--slider-lightness))
        );
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
}

.color-slider::-webkit-slider-thumb {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    background: transparent;
    border: 3px solid #ffffff;
    cursor: pointer;
}

.color-slider::-moz-range-thumb {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    background: transparent;
    border: 3px solid #ffffff;
    cursor: pointer;
}

.color-block
{
    --color: ;
    --fg-color: ;

    color: var(--fg-color);

    border-radius: var(--border-radius);
    min-width: 20ch;

    margin: 0.5em;
    padding: 0.5em;

    background-color: var(--color);
}

.flip-text
{
    color: var(--background-color);
}

.color-flow
{
    display: flex;
    flex-flow: row wrap;
    flex-grow: 1;
    flex-shrink: 0;
}

.h, .s, .l { margin-right: 0.5rem; }
.h::before
{
    content: 'H ';
    color: var(--decal-color);
}

.s::before
{
    content: 'S ';
    color: var(--decal-color);
}

.l::before
{
    content: 'L ';
    color: var(--decal-color);
}
.hexcode::before
{
    color: var(--decal-color);
    content: '#';
}
</style>
<html lang="en">
	<head>
		<BaseHead title="My Theme" description={SITE_DESCRIPTION} />
	</head>
    <body>
		<Header title="My Theme" />
		<main>
            <h1 class="title">My Theme</h1>
            <p>
                Customise the hue of this website! Almost all colors here are <code>hsl(a)</code> meaning they will match the color you set! This is applied to 
                (most) pages, in most places. Exceptions being syntax hilghting, which inherntly needs more colors.
            </p>
            <p>
                This part is inspired by <a href="https://basil.cafe/theme/">basil.cafe/theme/</a>, and 
                <a href="https://tech.lgbt/@maddie/110579964601033216">basil even helped me implement it</a>!</p>
            </p>
            <Aside>
                Hue: <span id="hue_int"></span>
                (<a href="#" id="reset">Reset Color</a>)
            </Aside>

            <input type="range" min="0" max="360" value="50" class="color-slider" id="color_slider">

           <h2>Main Monos</h2>

            <div class="color-flow">

                <div class="color-block" style="--color: var(--background-color);">
                    <text>Background</text>
                    <text><span class="h">Hue</span><span class="s">90%</span><span class="l">3%</span></text>
                    <text class="hexcode">Unknown</text>
                    <text><strong>Use</strong>: Main content backgrounds, ANSI Black</text>
                </div>

                <div class="color-block" style="--color: var(--component-color);">
                    <text>Component Color</text>
                    <text><span class="h">Hue</span><span class="s">80%</span><span class="l">7%</span></text>
                    <text class="hexcode">Unknown</text>
                    <text><strong>Use</strong>: Backgrounds for buttons and hilights, ANSI Dark Gray</text>
                </div>

                <div class="color-block" style="--fg-color: var(--decal-color);">
                    <text>Decal Color</text>
                    <text><span class="h">Hue</span><span class="s">60%</span><span class="l">40%</span></text>
                    <text class="hexcode">Unknown</text>
                    <text><strong>Use</strong>: Icons and symbols of the design, ANSI Light Gray.</text>
                </div>

                <div class="color-block" style="--fg-color: var(--text-accent-color);">
                    <text>Text Accent Color</text>
                    <text><span class="h">Hue</span><span class="s">80%</span><span class="l">84%</span></text>
                    <text class="hexcode">Unknown</text>
                    <text><strong>Use</strong>: Links, keywords, cursors, focus outlines.</text>
                </div>

                <div class="color-block" style="--fg-color: var(--text-main-color);">
                    <text>Text Main Color</text>
                    <text><span class="h">Hue</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">Unknown</text>
                    <text><strong>Use</strong>: Body Text, ANSI White</text>
                </div>
            </div>

            <h2>Colors</h2>

            <p>These are to be avoided. Thier main use is warnings and syntax colors.</p>

            <div class="color-flow">
                <div class="color-block" style="--fg-color: hsl(9, 80%, 77%);">
                    <text>Red</text>
                    <text><span class="h">9</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">F3A495</text>
                    <text><strong>Use</strong>: ANSI Red, Errors</text>
                </div>

                <div class="color-block" style="--fg-color: hsl(124, 80%, 77%);">
                    <text>Green</text>
                    <text><span class="h">124</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">95F39C</text>
                    <text><strong>Use</strong>: ANSI Green, Successes, Strings</text>
                </div>

                <div class="color-block" style="--fg-color: hsl(199, 80%, 77%);">
                    <text>Blue</text>
                    <text><span class="h">199</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">95D6F3</text>
                    <text><strong>Use</strong>: ANSI Blue, Numbers</text>
                </div>

                <div class="color-block" style="--fg-color: hsl(46, 80%, 77%);">
                    <text>Yellow</text>
                    <text><span class="h">46</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">F3DD95</text>
                    <text><strong>Use</strong>: ANSI Yellow, Variables, Properties</text>
                </div>

                <div class="color-block" style="--fg-color: hsl(236, 80%, 77%);">
                    <text>Purple</text>
                    <text><span class="h">236</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">959CF3</text>
                    <text><strong>Use</strong>: ANSI Purple/Pink, Keywords</text>
                </div>

                <div class="color-block" style="--fg-color: hsl(153, 80%, 77%);">
                    <text>Teal</text>
                    <text><span class="h">153</span><span class="s">80%</span><span class="l">77%</span></text>
                    <text class="hexcode">95F3C9</text>
                    <text><strong>Use</strong>: ANSI Teal, Functions, Methods, Classes, Constants</text>
                </div>
            </div>
		</main>
		<Footer />

        <script>
/**
 * https://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
 */
function hsl_to_Rgb(h, s, l) {
    var r, g, b;

    if(s == 0){
        r = g = b = l; // achromatic
    }else{
        function hue2rgb(p, q, t){
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;

        // Edited portion
        h = h / 360

        // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
        function colour_to_hex(colour)
        {
            var hex = colour.toString(16);
            return hex.length == 1 ? "0" + hex : hex;
        }
        //

        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    r = Math.round(r * 255);
    g = Math.round(g * 255);
    b = Math.round(b * 255);
    return "#" + colour_to_hex(r) + colour_to_hex(g) + colour_to_hex(b);
}
        </script>

	</body>
    <script is:inline>
var slider = document.getElementById("color_slider");
var output = document.getElementById("hue_int");
output.innerHTML = slider.value; // Display the default slider value
var reset_button = document.getElementById("reset");

reset_button.addEventListener("click", () => { 
    localStorage.removeItem("hue")
    slider.value = 190;
    root_element.style.setProperty("--hue", 190)
    output.innerHTML = "190";
});

var stored_color = localStorage.getItem("hue");

var root_element = document.documentElement

if (stored_color != null)
{
    hue_int.innerHTML = stored_color;
    slider.value = stored_color;
    root_element.style.setProperty("--hue", stored_color)
}

// slider.value = root_element.getProperty("--hue");

// Update the current slider value (each time you drag the slider handle)
slider.oninput = function() {
    output.innerHTML = this.value;

    root_element.style.setProperty("--hue", this.value)
    localStorage.setItem("hue", this.value)
}
    </script>
</html>
